// Generated by CoffeeScript 1.6.2
(function() {
  var Canvas, Css3Support, DiagonalSlider, _ACOS, _ANGLE_TEXT, _ASIN, _COS, _PERCENT_DISTRIBUTION_CLIP, _PERCENT_DISTRIBUTION_CONT, _RADIAN, _SIN, _SKEW_ANGLE;

  _SKEW_ANGLE = 33;

  _ANGLE_TEXT = -_SKEW_ANGLE;

  _PERCENT_DISTRIBUTION_CLIP = 0.3;

  _PERCENT_DISTRIBUTION_CONT = 1 - _PERCENT_DISTRIBUTION_CLIP * 2;

  _RADIAN = 180 / Math.PI;

  _SIN = Math['sin'];

  _ASIN = Math['asin'];

  _COS = Math['cos'];

  _ACOS = Math['acos'];

  Css3Support = (function() {
    Css3Support.prototype.vendors = ['-webkit-', '-o-', '-ms-', '-moz-', ''];

    /* Css3 quick support check
    */


    function Css3Support() {
      var p;

      p = document.createElement('p');
      this.testElement = p;
      document.body.insertBefore(this.testElement, null);
    }

    Css3Support.prototype.supports = function(key) {
      var e, v, _i, _len, _ref;

      _ref = this.vendors;
      for (e = _i = 0, _len = _ref.length; _i < _len; e = ++_i) {
        v = _ref[e];
        if (window.getComputedStyle(this.testElement).getPropertyValue(v + key)) {
          return {
            vendor: v,
            property: v + key
          };
        }
      }
      return false;
    };

    Css3Support.prototype.getCssPropertyVendor = function(baseProperty, value) {
      var e, i, v, _i, _len, _ref;

      i = {};
      _ref = this.vendors;
      for (e = _i = 0, _len = _ref.length; _i < _len; e = ++_i) {
        v = _ref[e];
        i[v + baseProperty] = value;
      }
      return i;
    };

    return Css3Support;

  })();

  Canvas = (function() {
    function Canvas(w, h, img) {
      if (img == null) {
        img = null;
      }
      this.canvas = document.createElement('canvas');
      this.canvas.width = w;
      this.canvas.height = h;
      this.context = this.canvas.getContext('2d');
      if (img !== null) {
        this.image = img;
      }
      this;
    }

    Canvas.prototype.w = function() {
      return this.canvas.width;
    };

    Canvas.prototype.h = function() {
      return this.canvas.height;
    };

    Canvas.prototype.getContext = function() {
      return this.context;
    };

    Canvas.prototype.getImageData = function() {
      return this.context.getImageData(0, 0, this.w(), this.h());
    };

    Canvas.prototype.putImageData = function(imageData) {
      return this.context.putImageData(imageData, 0, 0);
    };

    Canvas.prototype.getRect = function(rect, crop) {
      var result;

      this.context.save();
      this.context.drawImage(this.image, rect.x, rect.y, rect.width, rect.height, crop.x, crop.y, crop.width, crop.height);
      result = this.getImage();
      this.context.restore();
      return result;
    };

    Canvas.prototype.getImage = function(format) {
      if (format == null) {
        format = 'image/png';
      }
      return this.canvas.toDataURL(format);
    };

    Canvas.prototype.drawAndGetImage = function(image) {
      this.context.drawImage(image, 0, 0, image.width, image.height, 0, 0, this.w(), this.h());
      return this.getImage();
    };

    Canvas.prototype.imageToDataUrl = function(image, w, h) {
      var n;

      if (w == null) {
        w = image.width;
      }
      if (h == null) {
        h = image.height;
      }
      n = new Canvas(w, h, image);
      return n.getImage();
    };

    Canvas.prototype.canvasApply = function(obj) {
      (function(context) {
        var e, i, _results;

        _results = [];
        for (e in obj) {
          i = obj[e];
          _results.push(context[e] = i);
        }
        return _results;
      })(this.context);
      return this;
    };

    Canvas.prototype.drawTitle = function(text, bold, font, size, x, y, angle) {
      var metric, tx, ty;

      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      metric = this.context.measureText(text, bold, font, size);
      this.context.save();
      if (true) {
        tx = x - (metric.width / 2);
        ty = y + size;
        this.context.translate(tx, ty);
        this.context.rotate(angle);
        this.context.translate(-tx, -ty);
      }
      this.context.fillText(text, x, y);
      this.context.restore();
      return this;
    };

    Canvas.prototype.clipImageInDiagonal = function(mode, percentTriangleStart, rectCrop, rectCrop2) {
      var clipPathPoints, e, p, p0, p1, wside, _i, _len;

      if (mode == null) {
        mode = 'paralellogram';
      }
      if (percentTriangleStart == null) {
        percentTriangleStart = _PERCENT_DISTRIBUTION_CLIP;
      }
      if (rectCrop == null) {
        rectCrop = null;
      }
      if (rectCrop2 == null) {
        rectCrop2 = null;
      }
      p0 = {
        x: 0,
        y: 0
      };
      p1 = {
        x: this.w(),
        y: 0
      };
      clipPathPoints = [];
      this.context.save();
      this.context.beginPath();
      wside = percentTriangleStart * this.w();
      if (mode === 'paralellogram') {
        p1 = {
          x: wside,
          y: this.h()
        };
        this.context.moveTo(0, 0);
        clipPathPoints = [[p1.x, 0], [this.w(), 0], [this.w() - p1.x, this.h()], [0, this.h()], [p1.x, 0]];
      } else if (mode === 'gun') {
        p1 = {
          x: wside,
          y: this.h()
        };
        this.context.moveTo(0, 0);
        clipPathPoints = [[0, 0], [this.w(), 0], [this.w() - p1.x, this.h()], [0, this.h()], [0, 0]];
      }
      for (_i = 0, _len = clipPathPoints.length; _i < _len; _i++) {
        p = clipPathPoints[_i];
        this.context.lineTo(p[0], p[1]);
      }
      this.context.closePath();
      this.context.save();
      this.context.clip();
      try {
        this.context.drawImage(this.image, 0, 0, this.image.width, this.image.height, 0, 0, this.w(), this.h());
      } catch (_error) {
        e = _error;
        console.log(e, e.message, this.image);
      }
      this.context.restore();
      return this;
    };

    return Canvas;

  })();

  DiagonalSlider = (function() {
    DiagonalSlider.prototype.canvas = null;

    DiagonalSlider.prototype.defaults = {
      slideOpening: 'full',
      width: 1100,
      height: 365,
      angleClip: null,
      opening: 'auto',
      fontSize: '32px',
      fontFamily: 'Arial',
      fontColor: '#FFFFFF'
    };

    DiagonalSlider.prototype.reset = function(callbackEach, callbackComplete, $filter, $skipTransition) {
      var currentIndex, self, slides, supportTransform;

      if ($filter == null) {
        $filter = null;
      }
      if ($skipTransition == null) {
        $skipTransition = false;
      }
      self = this;
      self.scope.removeClass('open').find('.rubber').show();
      currentIndex = self.scope.data('currentIndex');
      supportTransform = self.css3.supports('transform');
      slides = self.slides;
      slides.sort(function(i) {
        return i === currentIndex;
      });
      if ($filter !== null) {
        slides = slides.filter(function(index) {
          return $filter(index, this);
        });
      }
      slides.removeClass('active');
      slides.each(function(i, slideElement) {
        var pcssl, slide, transform, transitionDuration, tx, ty;

        slide = $(slideElement);
        tx = slide.data('origen_x');
        ty = 0;
        transitionDuration = 800;
        transform = self._conditionalCssLeft(tx);
        transform['background-image'] = slide.data('clippedImageData');
        pcssl = self._parseCssLeft(slide);
        if (pcssl === tx || $skipTransition) {
          if (callbackEach) {
            callbackEach.apply(self, [i, slide]);
          }
          return slide;
        }
        if (supportTransform) {
          slide.addClass('animate').css(transform).one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function(event) {
            slide.removeClass('animate');
            if (callbackEach) {
              callbackEach.apply(self, [i, slide]);
            }
            return this;
          });
          return this;
        } else {
          slide.animate(transform, transitionDuration, function() {
            if (callbackEach) {
              callbackEach.apply(self, [i, slide]);
            }
            return this;
          });
          return this;
        }
      });
      return this;
    };

    DiagonalSlider.prototype.slidesgt = function(i) {
      return this.slides.slice(++i);
    };

    DiagonalSlider.prototype.slideslt = function(i) {
      return this.slides.slice(0, --i);
    };

    DiagonalSlider.prototype.getSlides = function(i) {
      return this.slides;
    };

    DiagonalSlider.prototype.restore = function(c) {
      if (c == null) {
        c = null;
      }
      return this.reset(c);
    };

    DiagonalSlider.prototype.close = function(options, c) {
      if (c == null) {
        c = null;
      }
      return this.reset(c);
    };

    DiagonalSlider.prototype._parseCssLeft = function(el, property) {
      var css3, cssKey, transform, value;

      if (property == null) {
        property = 'transform';
      }
      css3 = new Css3Support();
      cssKey = css3.supports(property);
      value = null;
      if (cssKey !== null) {
        transform = $(el).css(cssKey.property);
        value = parseInt(transform.replace(/[\D]+/, '').split(',')[4]);
      } else {
        value = parseInt($(el).css('left'));
      }
      return value;
    };

    DiagonalSlider.prototype._conditionalCssLeft = function(x) {
      var css3, css3supports, property, transform;

      css3 = new Css3Support();
      property = 'transform';
      css3supports = css3.supports(property);
      transform = css3supports ? css3.getCssPropertyVendor(property, "translate3d(" + x + "px, " + 0 + ", 0 )") : {
        x: left
      };
      return transform;
    };

    DiagonalSlider.prototype.open = function(index) {
      var animateTransition, container, css3supports, current, currentIndex, filterFunction, img, init_x, isClosed, isExternal, isOpen, opening, reference, self, slice;

      self = this;
      isOpen = this.scope.is('.open');
      isClosed = !isOpen;
      currentIndex = this.scope.data('currentIndex');
      if (currentIndex === index) {
        this.close({
          force: true
        });
        return false;
      }
      self.scope.removeClass('closed').addClass('open');
      this.slides.removeClass('active');
      opening = this.defaults.opening;
      current = this.slides.eq(index);
      this.scope.find('.rubber').hide();
      if (self.defaults.slideOpening === 'full') {
        slice = this.slides;
      } else {
        slice = this.slidesgt(index);
        current = slice.first();
      }
      img = current.find('img');
      reference = img.data('ref');
      container = current.find('.dcontent-inner');
      isExternal = reference.indexOf('.') > -1 || reference.indexOf('#') > -1;
      if (isExternal) {
        container.empty().load(reference);
      } else {
        container.empty().append($(reference));
      }
      init_x = parseInt(current.css('left')) + current.width() * _PERCENT_DISTRIBUTION_CLIP;
      animateTransition = function(el, i, skip, css3supports) {
        var dhis, origen_x, outsideViewport, transform;

        dhis = $(el);
        origen_x = parseInt(dhis.data('origen_x'));
        outsideViewport = origen_x + ((i > index ? 1 : -1) * dhis.width());
        transform = self._conditionalCssLeft(outsideViewport);
        if (css3supports) {
          dhis.addClass('animate').css(transform).one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function(event) {
            return true;
          });
        } else {
          dhis.css(transform);
        }
        return self.scope.trigger('dslider-change', [null]);
      };
      css3supports = self.css3.supports('transform');
      filterFunction = function(jor, el) {
        return jor !== index;
      };
      current.removeClass('animate');
      this.reset(function(ii, transitionSlide) {
        var i, isntMe, l, transform, _i;

        isntMe = current.get(0) !== transitionSlide.get(0);
        if (isntMe) {
          self.scope.trigger('dslider-before-change', [self, ii, transitionSlide]);
          animateTransition(transitionSlide, ii, index, css3supports);
        } else {
          transform = self._conditionalCssLeft(0);
          transform.left = 0;
          transform['background-image'] = transitionSlide.data('clippedImageData');
          transitionSlide.addClass('animate').addClass('active').css(transform);
        }
        l = self.slides.length - 1;
        if (ii === l) {
          self.scope.addClass('open');
          for (i = _i = 0; 0 <= l ? _i <= l : _i >= l; i = 0 <= l ? ++_i : --_i) {
            self.scope.removeClass('dbgi_' + i);
          }
          return self.scope.addClass('dbgi_' + currentIndex);
        }
      });
      this.scope.data('currentIndex', index);
      return this;
    };

    DiagonalSlider.prototype.handleClickEvent = function(event, index, ref) {
      this.open(index);
      return true;
    };

    function DiagonalSlider(scope, options) {
      var css3, defaults, degs, holder, labelOpts, opening, self, sliderHeight, sliderWidth, slides, slidesCount, transform, wtotal, zin;

      this.scope = scope;
      self = this;
      self.css3 = new Css3Support();
      defaults = self.defaults = $.extend(this.defaults, options);
      holder = $('ul,ol', this.scope);
      this.slides = slides = holder.children('li');
      slidesCount = slides.size();
      sliderWidth = defaults.width;
      sliderHeight = defaults.height;
      if (self.defaults.opening === 'auto') {
        self.defaults.opening = sliderWidth / slidesCount;
      }
      opening = defaults.opening;
      degs = (function() {
        var ah, angle1, angle2, aw, f, f1, f2, op;

        f = _PERCENT_DISTRIBUTION_CLIP;
        aw = sliderWidth * f;
        op = sliderHeight;
        ah = Math.sqrt(Math.pow(aw, 2) + Math.pow(op, 2));
        f1 = op / ah;
        f2 = aw / ah;
        angle1 = _RADIAN * _ASIN(f1);
        angle2 = 90 - angle1;
        return [angle1, angle2, f1, f2];
      })();
      wtotal = 0;
      this.scope.css({
        width: sliderWidth,
        height: sliderHeight
      }).data('currentIndex', 0);
      holder.addClass('clearfix');
      slides.css('width', sliderWidth);
      zin = 100 + slidesCount;
      labelOpts = {
        font: 'normal ' + defaults.fontSize + ' ' + defaults.fontFamily,
        fillStyle: defaults.fontColor
      };
      css3 = new Css3Support();
      transform = css3.supports('transform');
      slides.each(function(index, el) {
        var abs_leftpos, btnClose, clone, csstransform, dh, dl, dw, hasSettedLeftProp, i, image, imagej, init_x, items, leftReference, me, origen_x, rel_leftpos, tleft, tproperty, transformDegs, tstyle, whenImageIsLoaded, _i, _len, _ref;

        me = $(this);
        dw = me.width();
        dh = me.height();
        btnClose = $('<a href="" class="close-btn"></a>');
        btnClose.click(function(event) {
          event.preventDefault();
          event.stopPropagation();
          self.close();
          return self.scope.data('currentIndex', 0);
        });
        clone = null;
        clone = (function() {
          var exists;

          exists = me.find('.dcontent');
          if (exists.length > 0) {
            return exists;
          } else {
            return $('<div></div>').addClass('diagonal dcontent clearfix').append('<div class="dcontent-inner"></div>');
          }
        })();
        me.append(btnClose);
        imagej = me.find('img').height(sliderHeight);
        image = imagej.get(0);
        if (transform && index > 0) {
          init_x = opening;
          transformDegs = 'skew(-' + degs[1] + 'deg)';
          tstyle = transform.vendor + 'transform-style';
          tproperty = transform.property;
          abs_leftpos = init_x + (opening - opening * degs[1] / 100);
          rel_leftpos = init_x + (index * opening * (1 + degs[2]));
          dl = $('<div></div>').addClass('rubber').attr('for', index);
          dl.css(tproperty, transformDegs).css(tstyle, 'preserve-3d').css({
            height: sliderHeight * 1.5,
            width: opening,
            left: rel_leftpos,
            position: 'absolute',
            zIndex: ++zin,
            top: -50,
            cursor: 'pointer'
          });
          dl.bind('mouseover', function(event) {
            return me.toggleClass('d-hover');
          }).click(function(event) {
            event.preventDefault();
            event.stopPropagation();
            slides.removeClass('active');
            me.toggleClass('active');
            return self.handleClickEvent.apply(self, [event, index, me]);
          });
          me.parent().append(dl);
        } else {
          items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
          _ref = items.length;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            dl = $('<div></div>');
            dl.css({
              width: opening,
              height: items.length / sliderHeight
            });
            me.append(dl);
          }
        }
        leftReference = 0;
        if (index === 0) {
          leftReference = origen_x = index * opening;
          csstransform = self._conditionalCssLeft(origen_x);
          me.addClass('first').data('origen_x', origen_x).css(csstransform);
          hasSettedLeftProp = true;
        }
        if (index === slidesCount - 1) {
          me.addClass('last');
        }
        wtotal += dw;
        if (!hasSettedLeftProp) {
          leftReference = tleft = index * opening;
          csstransform = self._conditionalCssLeft(tleft);
          me.data('origen_x', tleft).css(csstransform);
        }
        imagej.hide().load(whenImageIsLoaded = function() {
          var backgroundCss, classname, cls1, cls2, cls3, destRect, dis, imgdata, justTheImageData, rect, rectData, rectcanvas, slice, sliceImg, sourceRect, xstart;

          dis = $(this);
          slice = opening + opening * (1 + degs[3]);
          xstart = leftReference;
          rectcanvas = new Canvas(slice, sliderHeight, image);
          sourceRect = {
            x: 0,
            y: 0,
            width: this.width,
            height: this.height
          };
          destRect = {
            x: -xstart,
            y: 0,
            width: sliderWidth,
            height: sliderHeight
          };
          rect = rectcanvas.getRect(sourceRect, destRect);
          rectData = rectcanvas.getImageData();
          imgdata = new Canvas(sliderWidth, sliderHeight);
          justTheImageData = imgdata.drawAndGetImage(image);
          sliceImg = new Image();
          sliceImg.onload = function() {
            var alt, clipMode, clippedImageData, dcanvas, fs;

            dcanvas = new Canvas(this.width, this.height, this);
            clipMode = index === 0 ? 'gun' : 'paralellogram';
            dcanvas.clipImageInDiagonal(clipMode, _PERCENT_DISTRIBUTION_CLIP);
            clippedImageData = dcanvas.getImage();
            me.data('clippedImageData', clippedImageData);
            fs = parseInt(defaults.fontSize);
            if ((alt = imagej.attr('alt')) !== null) {
              dcanvas.canvasApply(labelOpts).drawTitle(alt, 'normal', defaults.fontFamily, fs, (dw * _PERCENT_DISTRIBUTION_CLIP) - fs, sliderHeight, degs[0]);
            }
            return (function(eindex) {
              var head, style;

              style = '<style>';
              style += '.' + cls1 + '{ ';
              style += 'background-image: url(' + clippedImageData + ');';
              style += '}';
              style += '.' + cls2 + '{ ';
              style += 'background-image: url(' + justTheImageData + ');';
              style += '}';
              style += '.' + cls3 + '{ ';
              style += 'background-image: url(' + rect + ');';
              style += '}';
              style += '</style>';
              head = $('head:first');
              return head.append(style);
            })(index);
          };
          sliceImg.src = rect;
          $('#im').attr('src', rect);
          cls1 = 'dbg_' + index;
          cls2 = 'dbgi_' + index;
          cls3 = 'dbgc_' + index;
          classname = [cls1, cls2, cls3];
          backgroundCss = 'url(' + this.src + ')';
          clone.addClass(classname[0]);
          clone.insertAfter(this).css({
            height: dis.height(),
            width: dis.width()
          });
          me.data('background-origin', this.src);
          return me.data('background-css-origin', backgroundCss);
        });
        return me.css('cursor', 'pointer').css('z-index', zin--).click(function(event) {
          slides.removeClass('active');
          me.toggleClass('active');
          return self.handleClickEvent.apply(self, [event, index, me]);
        });
      });
      holder.css({
        width: wtotal + 'px'
      });
    }

    return DiagonalSlider;

  })();

  if (typeof this.jQuery !== null) {
    $.fn.diagonalSlider = function(options) {
      var args, isMethodCall, returnn, selection;

      if (options == null) {
        options = {};
      }
      selection = $(this);
      args = Array.prototype.slice.call(arguments);
      isMethodCall = typeof options === "string";
      returnn = null;
      if (isMethodCall) {
        returnn = (function() {
          var diagonalSlider, e, method, methodReference;

          diagonalSlider = selection.data('dslider');
          method = args.shift();
          methodReference = diagonalSlider[method];
          try {
            return methodReference.apply(diagonalSlider, args);
          } catch (_error) {
            e = _error;
            return null;
          }
        })();
      } else {
        selection.each(function() {
          var instance, me;

          me = $(this);
          me.addClass('dslider').data('dslider', (instance = new DiagonalSlider(me, options)));
          return me;
        });
      }
      if (returnn !== null) {
        returnn;
      } else {
        selection;
      }
      return this;
    };
  }

  this;

}).call(this);
